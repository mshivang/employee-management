pipeline {
    agent {
        docker {
            image 'python:3'
        }
    }

    triggers {
        pollSCM '*/5 * * * *'
    }

    environment {
        POSTGRES_DB = credentials('jenkins-postgres-db')
        POSTGRES_USER = credentials('jenkins-postgres-user') 
        POSTGRES_PASSWORD = credentials('jenkins-postgres-password')
        POSTGRES_HOST = credentials('jenkins-postgres-host')
        POSTGRES_PORT = credentials('jenkins-postgres-port')
        DJANGO_SECRET_KEY = credentials('jenkins-django-secret-key')
        
        NODE_DEPARTMENT_API = credentials('jenkins-node-department-api')
    }

    stages {
        stage('Start Postgres') {
            steps {
                echo 'Starting Postgres...'
                script {
                    docker.withRegistry('') {
                        docker.image('postgres:latest').run('-e POSTGRES_DB=$POSTGRES_DB -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD -e POSTGRES_HOST=$POSTGRES_HOST -e POSTGRES_PORT=$POSTGRES_PORT -d')
                    }
                }
            }
        }

        stage('Building') {
            steps {
                echo 'Building...'
                sh '''
                    cd backend
                    python3 -m venv env
                    . ./env/bin/activate
                    pip install -r requirements.txt
                '''
            }
        }

        stage('Testing') {
            steps {
                echo 'Testing...'
                sh '''
                    cd backend
                    . ./env/bin/activate
                    python3 manage.py test
                '''
            }
        }

        stage('Deploying') {
            steps {
                echo 'Deploying...'
                // Add deployment steps here
            }
        }

        stage('Stop Postgres') {
            steps {
                echo 'Stopping Postgres...'
                script {
                    docker.withRegistry('') {
                        docker.image('postgres:latest').stop()
                    }
                }
            }
        }
    }
}
